buildscript {
  repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
  }

  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:" + es_version
  }
}

group = 'com.o19s'
version = '0.1.1-es' + es_version + '-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'idea'
apply plugin: 'c'

esplugin {
  name 'ltr-query'
  description 'Learing to Rank Query w/ RankLib Models'
  classname 'com.o19s.es.ltr.LtrQueryParserPlugin'
}


// In this section you declare the dependencies for your production and test code
// Note, the two dependencies are not really needed as the buildscript dependency gets them in already
// they are just here as an example
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}
dependencies {
  compile 'org.elasticsearch:elasticsearch:' + es_version
  compile 'com.o19s:RankyMcRankFace:0.1.0'
  compile 'org.javassist:javassist:3.21.0-GA'
  compile 'janino:janino:2.5.10'
  testCompile 'org.elasticsearch.test:framework:' + es_version
}

compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
}

forbiddenApisMain.enabled = false;

// Set to false to not use elasticsearch checkstyle rules
checkstyleMain.enabled = true
checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
dependencyLicenses.enabled = false

// FIXME thirdparty audit needs to be enabled
thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
licenseHeaders.enabled = false

model {
    components {
        bridge(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir 'src/main/bridge'
                        include '*.c'
                    }
                }
            }
            buildTypes {
                all
            }
        }
    }
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cCompiler.withArguments { args ->
                    args << "-O3"
                    args << "-march=native"
                    args << "-I$System.env.JAVA_HOME/include"
                    args << "-I$System.env.JAVA_HOME/include/linux"
                }
            }
        }
    }
}

jar {
    from('build/libs/bridge/shared') {
        into 'lib/'
        include 'libbridge.so'
    }
}

tasks.withType(com.carrotsearch.gradle.junit4.RandomizedTestingTask) {
    systemProperty "java.library.path", "$projectDir/build/libs/bridge/shared"
}

